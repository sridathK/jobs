// Code generated by MockGen. DO NOT EDIT.
// Source: companyService.go
//
// Generated by this command:
//
//	mockgen -source=companyService.go -destination=companyservice_mock.go -package=services
//
// Package services is a generated GoMock package.
package services

import (
	model "project/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCompanyService is a mock of CompanyService interface.
type MockCompanyService struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyServiceMockRecorder
}

// GetJobsByCompanyId implements CompanyService.
func (*MockCompanyService) GetJobsByCompanyId(id int) ([]model.Job, error) {
	panic("unimplemented")
}

// GetCompanyById implements CompanyService.
func (*MockCompanyService) GetCompanyById(id int) (model.Company, error) {
	panic("unimplemented")
}

// GetJobByJobId implements CompanyService.
func (*MockCompanyService) GetJobByJobId(id int) (model.Job, error) {
	panic("unimplemented")
}

// getJobByJobId implements CompanyService.
func (*MockCompanyService) getJobByJobId(id int) (model.Job, error) {
	panic("unimplemented")
}

// MockCompanyServiceMockRecorder is the mock recorder for MockCompanyService.
type MockCompanyServiceMockRecorder struct {
	mock *MockCompanyService
}

// NewMockCompanyService creates a new mock instance.
func NewMockCompanyService(ctrl *gomock.Controller) *MockCompanyService {
	mock := &MockCompanyService{ctrl: ctrl}
	mock.recorder = &MockCompanyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyService) EXPECT() *MockCompanyServiceMockRecorder {
	return m.recorder
}

// CompanyCreate mocks base method.
func (m *MockCompanyService) CompanyCreate(nc model.CreateCompany) (model.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompanyCreate", nc)
	ret0, _ := ret[0].(model.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompanyCreate indicates an expected call of CompanyCreate.
func (mr *MockCompanyServiceMockRecorder) CompanyCreate(nc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompanyCreate", reflect.TypeOf((*MockCompanyService)(nil).CompanyCreate), nc)
}

// GetAllCompanies mocks base method.
func (m *MockCompanyService) GetAllCompanies() ([]model.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCompanies")
	ret0, _ := ret[0].([]model.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCompanies indicates an expected call of GetAllCompanies.
func (mr *MockCompanyServiceMockRecorder) GetAllCompanies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCompanies", reflect.TypeOf((*MockCompanyService)(nil).GetAllCompanies))
}

// GetAllJobs mocks base method.
func (m *MockCompanyService) GetAllJobs() ([]model.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobs")
	ret0, _ := ret[0].([]model.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobs indicates an expected call of GetAllJobs.
func (mr *MockCompanyServiceMockRecorder) GetAllJobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobs", reflect.TypeOf((*MockCompanyService)(nil).GetAllJobs))
}

// GetCompany mocks base method.
func (m *MockCompanyService) GetCompany(id int) (model.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompany", id)
	ret0, _ := ret[0].(model.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompany indicates an expected call of GetCompany.
func (mr *MockCompanyServiceMockRecorder) GetCompany(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompany", reflect.TypeOf((*MockCompanyService)(nil).GetCompany), id)
}

// GetJobs mocks base method.
func (m *MockCompanyService) GetJobs(id int) ([]model.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobs", id)
	ret0, _ := ret[0].([]model.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobs indicates an expected call of GetJobs.
func (mr *MockCompanyServiceMockRecorder) GetJobs(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobs", reflect.TypeOf((*MockCompanyService)(nil).GetJobs), id)
}

// JobCreate mocks base method.
func (m *MockCompanyService) JobCreate(nj model.CreateJob, id uint64) (model.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobCreate", nj, id)
	ret0, _ := ret[0].(model.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JobCreate indicates an expected call of JobCreate.
func (mr *MockCompanyServiceMockRecorder) JobCreate(nj, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobCreate", reflect.TypeOf((*MockCompanyService)(nil).JobCreate), nj, id)
}
